/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHospitalEntryArgs } from "./CreateHospitalEntryArgs";
import { UpdateHospitalEntryArgs } from "./UpdateHospitalEntryArgs";
import { DeleteHospitalEntryArgs } from "./DeleteHospitalEntryArgs";
import { HospitalEntryCountArgs } from "./HospitalEntryCountArgs";
import { HospitalEntryFindManyArgs } from "./HospitalEntryFindManyArgs";
import { HospitalEntryFindUniqueArgs } from "./HospitalEntryFindUniqueArgs";
import { HospitalEntry } from "./HospitalEntry";
import { HospitalEntryService } from "../hospitalEntry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HospitalEntry)
export class HospitalEntryResolverBase {
  constructor(
    protected readonly service: HospitalEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "read",
    possession: "any",
  })
  async _hospitalEntriesMeta(
    @graphql.Args() args: HospitalEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HospitalEntry])
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "read",
    possession: "any",
  })
  async hospitalEntries(
    @graphql.Args() args: HospitalEntryFindManyArgs
  ): Promise<HospitalEntry[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HospitalEntry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "read",
    possession: "own",
  })
  async hospitalEntry(
    @graphql.Args() args: HospitalEntryFindUniqueArgs
  ): Promise<HospitalEntry | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HospitalEntry)
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "create",
    possession: "any",
  })
  async createHospitalEntry(
    @graphql.Args() args: CreateHospitalEntryArgs
  ): Promise<HospitalEntry> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HospitalEntry)
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "update",
    possession: "any",
  })
  async updateHospitalEntry(
    @graphql.Args() args: UpdateHospitalEntryArgs
  ): Promise<HospitalEntry | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HospitalEntry)
  @nestAccessControl.UseRoles({
    resource: "HospitalEntry",
    action: "delete",
    possession: "any",
  })
  async deleteHospitalEntry(
    @graphql.Args() args: DeleteHospitalEntryArgs
  ): Promise<HospitalEntry | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
